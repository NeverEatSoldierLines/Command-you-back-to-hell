# 数据库建立语句
-- MySQL dump 10.13  Distrib 8.0.15, for macos10.14 (x86_64)
--
-- Host: localhost    Database: close_far
-- ------------------------------------------------------
-- Server version	8.0.15

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
SET NAMES utf8mb4 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `action`
--

DROP TABLE IF EXISTS `action`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `action` (
                          `action_id` int(11) NOT NULL AUTO_INCREMENT,
                          `action_name` varchar(40) NOT NULL,
                          `action_time` datetime NOT NULL,
                          `action_location` varchar(255) NOT NULL,
                          `action_detail` varchar(255) NOT NULL,
                          `user_id` int(11) NOT NULL,
                          `permitted` varchar(5) NOT NULL DEFAULT 'no',
                          PRIMARY KEY (`action_id`),
                          KEY `action_user_id_fk` (`user_id`),
                          CONSTRAINT `action_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='活动';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `action`
--

LOCK TABLES `action` WRITE;
/*!40000 ALTER TABLE `action` DISABLE KEYS */;
INSERT INTO `action` VALUES (1,'xxx企业招聘','2021-04-30 22:00:00','广东省广州市暨南大学南校区','xxxx企业来招聘啦,来这里看看',7,'yes'),(2,'xxx企业招聘','2021-04-30 22:00:00','广东省广州市暨南大学南校区','xxxx企业来招聘啦,来这里看看',7,'yes'),(5,'线上直播','2021-05-02 10:10:00','无','线上直播',8,'yes'),(6,'呃呃呃','2021-04-10 10:10:00','无','腾讯会议，会议号99988882',10,'yes'),(27,'xxx','2021-05-01 12:30:00','北京市','xxx',7,'yes');
/*!40000 ALTER TABLE `action` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `admin`
--

DROP TABLE IF EXISTS `admin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `admin` (
                         `admin_id` int(11) NOT NULL AUTO_INCREMENT,
                         `admin_name` varchar(20) NOT NULL,
                         `password` varchar(25) NOT NULL,
                         PRIMARY KEY (`admin_id`),
                         UNIQUE KEY `admin_admin_name_uindex` (`admin_name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin`
--

LOCK TABLES `admin` WRITE;
/*!40000 ALTER TABLE `admin` DISABLE KEYS */;
INSERT INTO `admin` VALUES (1,'孙豪','991008sunhaoADMIN');
/*!40000 ALTER TABLE `admin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `article` (
                           `article_id` int(11) NOT NULL AUTO_INCREMENT,
                           `article_name` varchar(20) DEFAULT 'unknown',
                           `content` longtext NOT NULL COMMENT '使用html语句块，图片采用链接',
                           `user_id` int(11) NOT NULL,
                           `upload_time` datetime NOT NULL,
                           `tag1` varchar(30) DEFAULT NULL,
                           `tag2` varchar(30) DEFAULT NULL,
                           `comment_number` int(11) NOT NULL DEFAULT '0',
                           `read_number` int(11) NOT NULL DEFAULT '0',
                           `likes` int(11) NOT NULL DEFAULT '0',
                           PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=143 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'springboot注解','@SpringBootApplication：包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序上下文。\n@Configuration 等同于spring的XML配置文件；使用Java代码可以检查类型安全。\n\n@EnableAutoConfiguration 自动配置。\n\n@ComponentScan 组件扫描，可自动发现和装配一些Bean。\n\n@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。\n\n@RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。\n\n@Autowired自动导入。\n\n@PathVariable获取参数。\n\n@JsonBackReference解决嵌套外链问题。\n\n@RepositoryRestResourcepublic配合spring-boot-starter-data-rest使用。',7,'2021-03-25 17:30:39','计算机科学与技术','springboot',16,10143,0),(4,'示例标题','示例内容',7,'2021-03-25 17:30:40','计算机科学与技术','springboot',3,10000,0),(5,'示例标题','示例内容',7,'2021-03-25 17:30:40','计算机科学与技术','springboot',0,10001,0),(6,'示例标题','示例内容',7,'2021-03-25 17:30:40','计算机科学与技术','springboot',0,10001,0),(7,'示例标题','示例内容',7,'2021-03-25 17:30:43','计算机科学与技术','springboot',0,10000,0),(8,'示例标题','示例内容',7,'2021-03-25 17:30:43','计算机科学与技术','springboot',0,10000,0),(9,'示例标题','示例内容',7,'2021-03-25 17:30:43','计算机科学与技术','springboot',0,10000,0),(10,'示例标题','示例内容',7,'2021-03-25 17:30:43','计算机科学与技术','springboot',23,10000,0),(11,'示例标题','示例内容',7,'2021-03-25 17:30:43','计算机科学与技术','springboot',0,10225,0),(12,'示例标题','示例内容',7,'2021-03-25 17:30:44','计算机科学与技术','springboot',0,10000,0),(13,'示例标题','示例内容',7,'2021-03-25 17:30:44','计算机科学与技术','springboot',0,10003,0),(14,'示例标题','示例内容',7,'2021-03-25 17:30:44','计算机科学与技术','springboot',0,10000,0),(15,'示例标题','示例内容',7,'2021-03-25 17:30:44','计算机科学与技术','springboot',0,10000,0),(16,'示例标题','示例内容',7,'2021-03-25 17:30:44','计算机科学与技术','springboot',0,10000,0),(17,'示例标题','示例内容',7,'2021-03-25 17:30:45','计算机科学与技术','springboot',99,10002,0),(18,'示例标题18','示例内容',7,'2021-03-25 17:30:45','计算机科学与技术','springboot',0,100010,0),(19,'示例标题','示例内容',7,'2021-03-25 17:30:45','计算机科学与技术','springboot',0,10000,0),(20,'示例标题','示例内容',7,'2021-03-25 17:30:45','计算机科学与技术','springboot',0,10000,0),(21,'示例标题','示例内容',7,'2021-03-25 17:30:45','计算机科学与技术','springboot',0,10000,0),(22,'示例标题','示例内容',7,'2021-03-25 17:30:46','计算机科学与技术','springboot',0,10000,0),(23,'示例标题','示例内容',7,'2021-03-25 17:30:46','计算机科学与技术','springboot',0,10000,0),(24,'示例标题','示例内容',7,'2021-03-25 17:30:46','计算机科学与技术','springboot',0,10000,0),(25,'示例标题','示例内容',7,'2021-03-25 17:30:46','计算机科学与技术','springboot',0,10000,0),(26,'示例标题','示例内容',7,'2021-03-25 17:30:46','计算机科学与技术','springboot',0,10000,0),(27,'示例标题','示例内容',7,'2021-03-25 17:30:47','计算机科学与技术','springboot',0,10000,0),(28,'示例标题','示例内容',7,'2021-03-25 17:30:47','计算机科学与技术','springboot',0,10000,0),(29,'示例标题','示例内容',7,'2021-03-25 17:30:47','计算机科学与技术','springboot',0,10000,0),(30,'示例标题','示例内容',7,'2021-03-25 17:30:47','计算机科学与技术','springboot',0,10000,0),(31,'示例标题','示例内容',7,'2021-03-25 17:30:47','计算机科学与技术','springboot',0,10000,0),(32,'示例标题','示例内容',7,'2021-03-25 17:30:48','计算机科学与技术','springboot',0,10000,0),(33,'示例标题','示例内容',7,'2021-03-25 17:30:48','计算机科学与技术','springboot',0,10000,0),(34,'示例标题','示例内容',7,'2021-03-25 17:30:48','计算机科学与技术','springboot',0,10000,0),(35,'示例标题','示例内容',7,'2021-03-25 17:30:48','计算机科学与技术','springboot',0,10000,0),(36,'示例标题','示例内容',7,'2021-03-25 17:30:48','计算机科学与技术','springboot',0,10000,0),(37,'示例标题','示例内容',7,'2021-03-25 17:30:49','计算机科学与技术','springboot',0,10000,0),(38,'示例标题','示例内容',7,'2021-03-25 17:30:49','计算机科学与技术','springboot',0,10000,0),(39,'示例标题','示例内容',7,'2021-03-25 17:30:49','计算机科学与技术','springboot',0,10000,0),(40,'示例标题','示例内容',7,'2021-03-25 17:30:49','计算机科学与技术','springboot',0,10000,0),(41,'示例标题','示例内容',7,'2021-03-25 17:30:50','计算机科学与技术','springboot',0,10000,0),(42,'示例标题','示例内容',7,'2021-03-25 17:30:50','计算机科学与技术','springboot',0,10000,0),(43,'示例标题','示例内容',7,'2021-03-25 17:30:50','计算机科学与技术','springboot',0,10000,0),(44,'示例标题','示例内容',7,'2021-03-25 17:30:50','计算机科学与技术','springboot',0,10000,0),(45,'示例标题','示例内容',7,'2021-03-25 17:30:50','计算机科学与技术','springboot',0,10000,0),(46,'示例标题','示例内容',7,'2021-03-25 17:30:51','计算机科学与技术','springboot',0,10000,0),(47,'示例标题','示例内容',7,'2021-03-25 17:30:51','计算机科学与技术','springboot',0,10000,0),(48,'示例标题','示例内容',7,'2021-03-25 17:30:51','计算机科学与技术','springboot',0,10000,0),(49,'示例标题','示例内容',7,'2021-03-25 17:30:51','计算机科学与技术','springboot',0,10000,0),(50,'示例标题','示例内容',7,'2021-03-25 17:30:52','计算机科学与技术','springboot',0,10000,0),(51,'示例标题','示例内容',7,'2021-03-25 17:30:52','计算机科学与技术','springboot',0,10000,0),(52,'示例标题','示例内容',7,'2021-03-25 17:30:52','计算机科学与技术','springboot',0,10000,0),(53,'示例标题','示例内容',7,'2021-03-25 17:30:52','计算机科学与技术','springboot',0,10000,0),(54,'示例标题','示例内容',7,'2021-03-25 17:30:52','计算机科学与技术','springboot',0,10000,0),(55,'示例标题','示例内容',7,'2021-03-25 17:30:53','计算机科学与技术','springboot',0,10000,0),(56,'示例标题','示例内容',7,'2021-03-25 17:30:53','计算机科学与技术','springboot',0,10000,0),(57,'示例标题','示例内容',7,'2021-03-25 17:30:53','计算机科学与技术','springboot',0,10000,0),(58,'示例标题','示例内容',7,'2021-03-25 17:30:53','计算机科学与技术','springboot',0,10000,0),(59,'示例标题','示例内容',7,'2021-03-25 17:30:54','计算机科学与技术','springboot',0,10000,0),(60,'示例标题','示例内容',7,'2021-03-25 17:30:54','计算机科学与技术','springboot',0,10000,0),(61,'示例标题','示例内容',7,'2021-03-25 17:30:54','计算机科学与技术','springboot',0,10000,0),(62,'示例标题','示例内容',7,'2021-03-25 17:30:54','计算机科学与技术','springboot',0,10000,0),(63,'示例标题','示例内容',7,'2021-03-25 17:30:55','计算机科学与技术','springboot',0,10000,0),(64,'示例标题','示例内容',7,'2021-03-25 17:30:55','计算机科学与技术','springboot',0,10000,0),(65,'示例标题','示例内容',7,'2021-03-25 17:30:55','计算机科学与技术','springboot',0,10000,0),(66,'示例标题','示例内容',7,'2021-03-25 17:30:55','计算机科学与技术','springboot',0,10000,0),(67,'示例标题','示例内容',7,'2021-03-25 17:30:55','计算机科学与技术','springboot',0,10000,0),(68,'示例标题','示例内容',7,'2021-03-25 17:30:56','计算机科学与技术','springboot',0,10000,0),(69,'示例标题','示例内容',7,'2021-03-25 17:30:56','计算机科学与技术','springboot',0,10000,0),(70,'示例标题','示例内容',7,'2021-03-25 17:30:56','计算机科学与技术','springboot',0,10000,0),(71,'示例标题','示例内容',7,'2021-03-25 17:30:56','计算机科学与技术','springboot',0,10000,0),(72,'示例标题','示例内容',7,'2021-03-25 17:30:56','计算机科学与技术','springboot',0,10000,0),(73,'示例标题','示例内容',7,'2021-03-25 17:30:57','计算机科学与技术','springboot',0,10000,0),(74,'示例标题','示例内容',7,'2021-03-25 17:30:57','计算机科学与技术','springboot',0,10000,0),(75,'示例标题','示例内容',7,'2021-03-25 17:30:57','计算机科学与技术','springboot',0,10000,0),(76,'示例标题','示例内容',7,'2021-03-25 17:30:57','计算机科学与技术','springboot',0,10000,0),(77,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(78,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(79,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(80,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(81,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(82,'示例标题','示例内容',7,'2021-03-25 17:30:58','计算机科学与技术','springboot',0,10000,0),(83,'示例标题','示例内容',7,'2021-03-25 17:30:59','计算机科学与技术','springboot',0,10000,0),(84,'示例标题','示例内容',7,'2021-03-25 17:30:59','计算机科学与技术','springboot',0,10000,0),(85,'示例标题','示例内容',7,'2021-03-25 17:30:59','计算机科学与技术','springboot',0,10000,0),(86,'示例标题','示例内容',7,'2021-03-25 17:30:59','计算机科学与技术','springboot',0,10000,0),(87,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(88,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(89,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(90,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(91,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(92,'示例标题','示例内容',7,'2021-03-25 17:31:00','计算机科学与技术','springboot',0,10000,0),(93,'示例标题','示例内容',7,'2021-03-25 17:31:01','计算机科学与技术','springboot',0,10001,0),(94,'示例标题','示例内容',7,'2021-03-25 17:31:01','计算机科学与技术','springboot',0,10000,0),(95,'示例标题','示例内容',7,'2021-03-25 17:31:01','计算机科学与技术','springboot',0,10000,0),(96,'示例标题','示例内容',7,'2021-03-25 17:31:01','计算机科学与技术','springboot',0,10000,0),(97,'示例标题','示例内容',7,'2021-03-25 17:31:01','计算机科学与技术','springboot',0,10000,0),(98,'any','any',7,'2021-03-26 20:44:01','any','any',0,0,0),(99,'sss','ssss',7,'2021-03-27 00:08:36','sss','tag2',0,0,0),(100,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 18:46:08','','',0,0,0),(101,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 19:19:12','','',0,0,0),(102,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 19:20:46','','',0,0,0),(103,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 19:21:40','','',0,0,0),(104,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 19:22:28','','',0,0,0),(105,'','package cn.edu.jnu.service;<br><br>import cn.edu.jnu.entity.Article;<br>import cn.edu.jnu.entity.File;<br><br>import java.util.List;<br><br>public interface SelectService {<br>&nbsp; &nbsp; List&lt;File&gt; selectFileList();<br><br>&nbsp; &nbsp; List&lt;Article&gt; selectArticleList();<br><br>&nbsp; &nbsp; List&lt;String&gt; findCommentsByArticleId(Integer articleId);<br><br>&nbsp; &nbsp; Integer findCommentNumberById(Integer articleId);<br><br>&nbsp; &nbsp; Article selectArticleById(Integer articleId);<br><br>&nbsp; &nbsp; Integer selectUserIdByUsername(String username);<br><br>}<br><br>',7,'2021-03-27 19:23:15','','',0,0,0),(115,'a','\n        ',7,'2021-03-27 19:34:04','','',0,0,0),(116,'a','\n        ',7,'2021-03-27 19:34:18','','',0,0,0),(117,'a','\n        ',7,'2021-03-27 19:34:30','','',0,0,0),(118,'ajaxController','package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br><br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br><br><br>&nbsp; &nbsp; }<br>}<br><br>\n        ',7,'2021-03-27 19:46:34','springboot','ajax请求',0,9,0),(119,'ajax','package cn.edu.jnu.controller;\n\nimport cn.edu.jnu.service.InsertService;\nimport cn.edu.jnu.service.SelectService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Time;\n\n@Controller\npublic class ajaxController {\n\n    @Autowired\n    private SelectService selectService;\n\n    @Autowired\n    private InsertService insertService;\n\n    @RequestMapping(\"/ajaxUploadArticle\")\n    @ResponseBody\n    public String uploadArticle(@RequestParam(\"content\") String content,\n                                @RequestParam(\"tag1\") String tag1,\n                                @RequestParam(\"tag2\") String tag2,\n                                @RequestParam(\"articleName\") String articleName,\n                                HttpServletRequest request) {\n        /**\n         * 将信息持久化到数据库\n         */\n//数据不全执行sql会执行失败\n\n        //通过session 获取username，从而获取userid\n        String username = (String) request.getSession().getAttribute(\"username\");\n        Integer userId = selectService.selectUserIdByUsername(username);\n        System.out.println(userId);\n        System.out.println(content);\n        System.out.println(tag1);\n        System.out.println(tag2);\n        System.out.println(articleName);\n        //将信息处理\n        //存储\n        //插入语句有问题\n        boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);\n        if (isSuccess){\n            return \"提交成功\";\n        }else {\n            return \"提交失败\";\n        }\n\n\n    }\n}\n\n',7,'2021-03-27 19:55:15','a a','aa',0,1,0),(120,'你','package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br><br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br><br>\n        ',7,'2021-03-27 20:25:42','','',0,1,0),(121,'你','package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br>&lt;a&gt;www.baidu.com&lt;/a&gt;<br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br><br>\n        ',7,'2021-03-27 20:29:08','','',0,3,0),(122,'s','package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br>&lt;a&gt;www.baidu.com&lt;/a&gt;<br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br><br>\n        ',7,'2021-03-27 20:40:02','','',0,2,0),(123,'a','<html>\n    <head></head>package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br>&lt;a&gt;www.baidu.com&lt;/a&gt;<br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br><br>\n        </body>\n        </html>',7,'2021-03-27 20:43:10','','',0,10,0),(124,'a','package cn.edu.jnu.controller;<br><br>import cn.edu.jnu.service.InsertService;<br>import cn.edu.jnu.service.SelectService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>import javax.servlet.http.HttpServletRequest;<br>import java.sql.Time;<br>&lt;a&gt;www.baidu.com&lt;/a&gt;<br>@Controller<br>public class ajaxController {<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private SelectService selectService;<br><br>&nbsp; &nbsp; @Autowired<br>&nbsp; &nbsp; private InsertService insertService;<br><br>&nbsp; &nbsp; @RequestMapping(\"/ajaxUploadArticle\")<br>&nbsp; &nbsp; @ResponseBody<br>&nbsp; &nbsp; public String uploadArticle(@RequestParam(\"content\") String content,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag1\") String tag1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"tag2\") String tag2,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestParam(\"articleName\") String articleName,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HttpServletRequest request) {<br>&nbsp; &nbsp; &nbsp; &nbsp; /**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* 将信息持久化到数据库<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>//数据不全执行sql会执行失败<br><br>&nbsp; &nbsp; &nbsp; &nbsp; //通过session 获取username，从而获取userid<br>&nbsp; &nbsp; &nbsp; &nbsp; String username = (String) request.getSession().getAttribute(\"username\");<br>&nbsp; &nbsp; &nbsp; &nbsp; Integer userId = selectService.selectUserIdByUsername(username);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(userId);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(content);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag1);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(articleName);<br>&nbsp; &nbsp; &nbsp; &nbsp; //将信息处理<br>&nbsp; &nbsp; &nbsp; &nbsp; //存储<br>&nbsp; &nbsp; &nbsp; &nbsp; //插入语句有问题<br>&nbsp; &nbsp; &nbsp; &nbsp; boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);<br>&nbsp; &nbsp; &nbsp; &nbsp; if (isSuccess){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交成功\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }else {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"提交失败\";<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br><br>\n        ',7,'2021-03-27 20:58:28','','',0,5,0),(125,'u','package cn.edu.jnu.controller;\n\nimport cn.edu.jnu.service.InsertService;\nimport cn.edu.jnu.service.SelectService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Time;\n<a>www.baidu.com</a>\n@Controller\npublic class ajaxController {\n\n    @Autowired\n    private SelectService selectService;\n\n    @Autowired\n    private InsertService insertService;\n\n    @RequestMapping(\"/ajaxUploadArticle\")\n    @ResponseBody\n    public String uploadArticle(@RequestParam(\"content\") String content,\n                                @RequestParam(\"tag1\") String tag1,\n                                @RequestParam(\"tag2\") String tag2,\n                                @RequestParam(\"articleName\") String articleName,\n                                HttpServletRequest request) {\n        /**\n         * 将信息持久化到数据库\n         */\n//数据不全执行sql会执行失败\n\n        //通过session 获取username，从而获取userid\n        String username = (String) request.getSession().getAttribute(\"username\");\n        Integer userId = selectService.selectUserIdByUsername(username);\n        System.out.println(userId);\n        System.out.println(content);\n        System.out.println(tag1);\n        System.out.println(tag2);\n        System.out.println(articleName);\n        //将信息处理\n        //存储\n        //插入语句有问题\n        boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);\n        if (isSuccess){\n            return \"提交成功\";\n        }else {\n            return \"提交失败\";\n        }\n    }\n}\n\n\n        ',7,'2021-03-27 21:57:15','','',0,2,0),(126,'n','package cn.edu.jnu.controller;\n<ni>\nimport cn.edu.jnu.service.InsertService;\nimport cn.edu.jnu.service.SelectService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Time;\n<a>www.baidu.com</a>\n@Controller\npublic class ajaxController {\n\n    @Autowired\n    private SelectService selectService;\n\n    @Autowired\n    private InsertService insertService;\n\n    @RequestMapping(\"/ajaxUploadArticle\")\n    @ResponseBody\n    public String uploadArticle(@RequestParam(\"content\") String content,\n                                @RequestParam(\"tag1\") String tag1,\n                                @RequestParam(\"tag2\") String tag2,\n                                @RequestParam(\"articleName\") String articleName,\n                                HttpServletRequest request) {\n        /**\n         * 将信息持久化到数据库\n         */\n//数据不全执行sql会执行失败\n\n        //通过session 获取username，从而获取userid\n        String username = (String) request.getSession().getAttribute(\"username\");\n        Integer userId = selectService.selectUserIdByUsername(username);\n        System.out.println(userId);\n        System.out.println(content);\n        System.out.println(tag1);\n        System.out.println(tag2);\n        System.out.println(articleName);\n        //将信息处理\n        //存储\n        //插入语句有问题\n        boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);\n        if (isSuccess){\n            return \"提交成功\";\n        }else {\n            return \"提交失败\";\n        }\n    }\n}\n\n\n        ',7,'2021-03-27 21:58:10','','',0,4,0),(127,'a','package cn.edu.jnu.controller;\n<ni>\nimport cn.edu.jnu.service.InsertService;\nimport cn.edu.jnu.service.SelectService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Time;\n<a>www.baidu.com</a>\n@Controller\npublic class ajaxController {\n\n    @Autowired\n    private SelectService selectService;\n\n    @Autowired\n    private InsertService insertService;\n\n    @RequestMapping(\"/ajaxUploadArticle\")\n    @ResponseBody\n    public String uploadArticle(@RequestParam(\"content\") String content,\n                                @RequestParam(\"tag1\") String tag1,\n                                @RequestParam(\"tag2\") String tag2,\n                                @RequestParam(\"articleName\") String articleName,\n                                HttpServletRequest request) {\n        /**\n         * 将信息持久化到数据库\n         */\n//数据不全执行sql会执行失败\n\n        //通过session 获取username，从而获取userid\n        String username = (String) request.getSession().getAttribute(\"username\");\n        Integer userId = selectService.selectUserIdByUsername(username);\n        System.out.println(userId);\n        System.out.println(content);\n        System.out.println(tag1);\n        System.out.println(tag2);\n        System.out.println(articleName);\n        //将信息处理\n        //存储\n        //插入语句有问题\n        boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);\n        if (isSuccess){\n            return \"提交成功\";\n        }else {\n            return \"提交失败\";\n        }\n    }\n}\n\n\n        ',7,'2021-03-27 22:14:41','','',1,9,0),(128,'a','package cn.edu.jnu.controller;\n<ni>\nimport cn.edu.jnu.service.InsertService;\nimport cn.edu.jnu.service.SelectService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.sql.Time;\n<a>www.baidu.com</a>\n@Controller\npublic class ajaxController {\n\n    @Autowired\n    private SelectService selectService;\n\n    @Autowired\n    private InsertService insertService;\n\n    @RequestMapping(\"/ajaxUploadArticle\")\n    @ResponseBody\n    public String uploadArticle(@RequestParam(\"content\") String content,\n                                @RequestParam(\"tag1\") String tag1,\n                                @RequestParam(\"tag2\") String tag2,\n                                @RequestParam(\"articleName\") String articleName,\n                                HttpServletRequest request) {\n        /**\n         * 将信息持久化到数据库\n         */\n//数据不全执行sql会执行失败\n\n        //通过session 获取username，从而获取userid\n        String username = (String) request.getSession().getAttribute(\"username\");\n        Integer userId = selectService.selectUserIdByUsername(username);\n        System.out.println(userId);\n        System.out.println(content);\n        System.out.println(tag1);\n        System.out.println(tag2);\n        System.out.println(articleName);\n        //将信息处理\n        //存储\n        //插入语句有问题\n        boolean isSuccess = insertService.saveArticleInfo(articleName, content, userId, tag1, tag2);\n        if (isSuccess){\n            return \"提交成功\";\n        }else {\n            return \"提交失败\";\n        }\n    }\n}\n\n\n        ',7,'2021-03-27 22:14:47','','',6,568,0),(130,'springboot和SSM哪个更好?','        \n如题,本人初学者,不知道springboot相比ssm的优缺点有哪些呢?\n',10,'2021-04-01 16:01:01','问题','springboot',27,353,0),(131,'随便写写','能看见我头像吗@·@',11,'2021-04-06 23:55:19','','',3,29,0),(132,'bu','zaizheli',8,'2021-04-07 09:02:43','','',0,0,0),(133,'Java基础','1）编写一个Java程序片断，以定义一个表示学生的类Student。这个类的属性有“学号”、“班号”、“姓名”、“性别”、“年龄”，方法有“获得学号”、“获得班号”、“获得性别”、“获得姓名”、“获得年龄”。\n2）为类Student增加一个方法public String toString( )，该方法把Student类的对象的所有属性信息组合成一个字符串以便输出显示。编写一个Java Application程序，创建Student类的对象，并验证新增加的功能。\n\n package xin;\nimport java.util.Scanner;\npublic class Student {\n    int number;\n    String classnumber;\n    int age;\n    String name;\n    String sex;\n   \n    Student(int x,String y,int z,String p){\n    	number = x;\n    	classnumber = y;\n    	age = z;\n    	name = p;\n    }\n     int getNumber() {\n    	return number;  //返回学号\n    }\n     String getSClassnumber() {\n    	return classnumber;  //返回班号\n    }\n     int getAge() {\n    	return age;     //返回年龄\n    }\n     String getName() {\n    	 return name;    //返回姓名\n     }\n     String getSex() {\n    	 return sex;   //返回性别\n     }\n    public String toString() {   	\n   return \"学号:\"+number+\" 班号:\"+classnumber+\" 姓名:\"+name+\" 性别:\"+sex+\" 年龄:\"+age;\n    }\n   public static void main(String args[]) {\n	   boolean boo,a;\n	   int number1,age1;\n	   String classnumber1,st;\n	   String name1,sex1;\n	   Student stu = new Student(1,\"s\",1,\"xaio\");\n	   Scanner reader = new Scanner(System.in);\n	   System.out.println(\"请输入学号、班号、姓名、性别、年龄:\");\n	   stu.number = reader.nextInt();\n	   stu.classnumber = reader.next();\n	   stu.name = reader.next();\n	   stu.sex = reader.next();\n	   stu.age = reader.nextInt();\n	   st = stu.toString();\n	   System.out.println(st);\n	   System.out.println(\"是否修改该学生信息？\");\n	   System.out.println(\"如果修改则输入true,反之false\");\n	    a = reader.nextBoolean(); \n	   if(a) {\n		   System.out.println(\"请输入学号、班号、姓名、性别、年龄:\");\n		   number1 = reader.nextInt();\n		   classnumber1 = reader.next();\n		   name1 = reader.next();\n		   sex1 = reader.next();\n		   age1 = reader.nextInt();		   \n	   System.out.println(\"学号:\"+number1+\" 班号:\"+classnumber1+\n			     \" 姓名:\"+name1+\" 性别:\"+sex1+\" 年龄:\"+age1);\n   }\n	   else\n	   {System.out.println(\"继续执行下一步\");}\n      System.out.println(\"输入true继续，false退出\"); \n       boo = reader.nextBoolean();\n     System.out.println(\"*********************\");\n      if(boo) {\n    	  main(args);   //函数调用\n      }\n      else\n    	  System.out.println(\"程序无法执行!!!!\");\n   }\n}\r\n————————————————\r\n版权声明：本文为CSDN博主「小熊同鞋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\r\n原文链接：https://blog.csdn.net/weixin_51248437/article/details/115432791\n',8,'2021-04-07 09:39:42','','',1,6,0),(134,'微光第一章','二零零二年六月九号下午。\n　　孙志宇正在家里坐着，突然想起来自己还有一些东西落在宿舍，便连忙赶回去取。匆匆从宿舍取完自己的物品，便在淅淅沥沥的小雨中离开了待了三年的高中学校。\n　　走到门口时，门卫突然对孙志宇打招呼。\n　　“志宇，考得怎么样啊？”\n　　“还行，谢谢叔叔。”\n　　“以后多回来看看学校！”\n　　他微笑着点点头，和门卫摆摆手便走了。\n　　回头看了一眼曾经读书的教学楼，孙志宇长长的叹了一口气。\n　　“孙志宇！等一等！”\n　　孙志宇回头一看，正是好友杨家豪在向他招手。\n　　“怎么了？”\n　　\n',8,'2021-04-07 11:02:52','小说','伦理',0,2,0),(135,'本人写的小说','\n各位好，我写了一个小说，兴趣使然，有兴趣的可以去看看，链接：\nhttp://www.jjwxc.net/onebook.php?novelid=4431759&chapterid=2\n我贴了一个小片段：\n\n二零零二年六月九号下午。\n　　孙志宇正在家里坐着，突然想起来自己还有一些东西落在宿舍，便连忙赶回去取。匆匆从宿舍取完自己的物品，便在淅淅沥沥的小雨中离开了待了三年的高中学校。\n　　走到门口时，门卫突然对孙志宇打招呼。\n　　“志宇，考得怎么样啊？”\n　　“还行，谢谢叔叔。”\n　　“以后多回来看看学校！”\n　　他微笑着点点头，和门卫摆摆手便走了。\n　　回头看了一眼曾经读书的教学楼，孙志宇长长的叹了一口气。\n　　“孙志宇！等一等！”\n　　孙志宇回头一看，正是好友杨家豪在向他招手。\n　　“怎么了？”\n　　\n',8,'2021-04-07 11:04:44','小说','推荐',0,2,0),(136,'初中物理知识点分享','        一、重力的概述\n\n1、定义：由于地球的吸引而使物体受到的力.\n\n2、公式：G=mg\n\n3、方向：竖直向下\n\n4、作用点：物体的重心\n\n5、施力物体：地球\n\n6、重力方向的应用：重垂线（铅垂线）\n\n二、重力的例题\n\n已知物体在月球上受到的重力为地球上的六分之一，一位宇航员的体重为$686N$，当他登上月球时，其质量为（）\n\nA. $70~kg$ㅤB. $11.7~kg$ ㅤC. $114.3~kg$ ㅤD. $686~kg$\n\n答案：A\n解析：本题中的“体重”是指宇航员在地球上的重力，则由 $m=G/g$ 可求其在地球上的质量为 $70~kg$。又因质量不随位置而变，故宇航员在月球上的质量仍为 $70~kg$。\n',8,'2021-04-07 11:13:21','初中物理','教资考核',0,0,0),(137,'C#委托解释','       委托(Delegate)\n\n委托是对存有某个方法的引用的一种引用类型变量。\n\n委托特别用于实现事件和回调方法。\n\n声明委托\n\npublic delegate int MyDelegate (string s);\n \n\n实例化委托\n\n声明了委托类型，委托对象必须使用new关键字来创建，且与一个特定的方法相关。\n\n当创建委托时，传递到 new 语句的参数就像方法调用一样书写，但是不带有参数。例如：\n\npublic delegate void printString(string s);\n...\nprintString ps1 = new printString(WriteToScreen);\n \n\n示例代码\n\nusing System;\n\ndelegate int NumberChanger(int n);\nnamespace DelegateAppl\n{\n   class TestDelegate\n   {\n      static int num = 10;\n      public static int AddNum(int p)\n      {\n         num += p;\n         return num;\n      }\n\n      public static int MultNum(int q)\n      {\n         num *= q;\n         return num;\n      }\n      public static int getNum()\n      {\n         return num;\n      }\n\n      static void Main(string[] args)\n      {\n         // 创建委托实例\n         NumberChanger nc1 = new NumberChanger(AddNum);\n         NumberChanger nc2 = new NumberChanger(MultNum);\n         // 使用委托对象调用方法\n         nc1(25);\n         Console.WriteLine(\"Value of Num: {0}\", getNum());\n         nc2(5);\n         Console.WriteLine(\"Value of Num: {0}\", getNum());\n         Console.ReadKey();\n      }\n   }\n}\n\n',8,'2021-04-07 11:15:04','C#','委托',0,3,0),(138,'concat函数拼接字符串','        MySQL 中的 CONCAT(sl，s2，...) 函数返回结果为连接参数产生的字符串，或许有一个或多个参数。\n\n若有任何一个参数为 NULL，则返回值为 NULL。若所有参数均为非二进制字符串，则结果为非二进制字符串。若自变量中含有任一二进制字符串，则结果为一个二进制字符串。\n\n【实例】使用 CONCAT 函数连接字符串，输入的 SQL 语句和执行结果如下所示。\nmysql> SELECT CONCAT(\'MySQL\',\'5.7\'),CONCAT(\'MySQL\',NULL);\n+-----------------------+----------------------+\n| CONCAT(\'MySQL\',\'5.7\') | CONCAT(\'MySQL\',NULL) |\n+-----------------------+----------------------+\n| MySQL5.7              | NULL                 |\n+-----------------------+----------------------+\n1 row in set (0.03 sec)\n由运行结果可知，CONCAT(\'MySQL\'，\'5.7\') 返回两个字符串连接后的字符串；CONCAT(‘MySQL’，NULL) 中有一个参数为 NULL，因此返回结果为 NULL。\n',8,'2021-04-07 11:31:15','MySQL','拼接字符串',0,0,0),(141,'图片测试','        相信很多人都知道反射可以说是Java中最强大的技术了，它可以做的事情太多太多，很多优秀的开源框架都是通过反射完成的，比如最初的很多注解框架，后来因为java反射影响性能，所以被运行时注解APT替代了，java反射有个开源框架jOOR相信很多人都用过，不过我们还是要学习反射的基础语法，这样才能自己写出优秀的框架，当然这里所讲的反射技术，是学习Android插件化技术、Hook技术等必不可少的！\n\n一、基本反射技术\n\n      1.1 根据一个字符串得到一个类\n\n        getClass方法\n\n String name = \"Huanglinqing\";\n Class c1 = name.getClass();\n System.out.println(c1.getName());\n     打印结果如下：\n\n    \n\n    Class.forName\n\n    比如我们获取java.lang.String的类名 \n\n   String name = \"java.lang.String\";\n   Class c1 = null;\n   try {\n          c1 = Class.forName(name);\n          System.out.println(c1.getName());\n      } catch (ClassNotFoundException e) {\n  }\n    这里也通过捕获异常，因为我们传的这个字符串可能不合法，字符串合法命名是类的命名空间和类的名称组成\n\n    打印结果如下：\n\n    \n   我们还可以通过c1.getSuperclass()获取到他的父类\n\n   Type属性\n\n    基本类型都有type属性，可以得到这个基本类型的类型，比如：\n\nClass c1 = Boolean.TYPE;\nClass c2 = Byte.TYPE;\nClass c3 = Float.TYPE;\nClass c4 = Double.TYPE;\n 停停停！这些东西有啥子用，如此鸡肋！ 别急，一切都是为后续做准备。\n二、获取类的成员\n\n         当类中方法定义为私有的时候我们能调用？不能！当变量是私有的时候我们能获取吗？不能！但是反射可以，比如源码中有你需要用到的方法，但是那个方法是私有的，这个时候你就可以通过反射去执行这个私有方法，并且获取私有变量。\n\n       获取类的构造函数\n\n       为了便于测试，我们定义一个Test类，Test类如下：（省略get和set方法）\n\n       Test类中我们定义是三个私有变量，生成两个公有的含参构造方法和一个私有的含参构造方法以及一个公有的无参构造方法。\n\npublic class Test {\n \n    private int age;\n    private String name;\n    private int testint;\n \n    public Test(int age) {\n        this.age = age;\n    }\n \n    public Test(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n \n    private Test(String name) {\n        this.name = name;\n    }\n \n    public Test() {\n    }\n      下面我们通过反射获取这些构造方法\n\n       获取类的所有构造方法\n\n Test test = new Test();\n Class c4 = test.getClass();\n Constructor[] constructors ;\n constructors = c4.getDeclaredConstructors();\n      通过getDeclaredConstructors可以返回类的所有构造方法，返回的是一个数组因为构造方法可能不止一个，通过getModifiers可以得到构造方法的类型，getParameterTypes可以得到构造方法的所有参数，返回的是一个Class数组，所以我们如果想获取所有构造方法以及每个构造方法的参数类型，可以有如下代码：\n\n  for (int i = 0; i < constructors.length; i++) {\n        System.out.print(Modifier.toString(constructors[i].getModifiers()) + \"参数：\");\n        Class[] parametertypes = constructors[i].getParameterTypes();\n        for (int j = 0; j < parametertypes.length; j++) {\n             System.out.print(parametertypes[j].getName() + \" \");\n       }\n      System.out.println(\"\");\n  }\n    运行结果如下所示：\n\n    \n\n    这样我们就得到了类中所有构造方法和构造方法中的参数，那么我们如何获取特定的构造方法呢？\n\n    获取类中特定的构造方法\n\n    我们可以通过getConstructors方法获取类中 所有的public类型的构造方法，代码和上面一样就不演示了。\n\n    我们可以通过getDeclaredConstructor()方法传参获取特定参数类型的构造方法，这里注意是getDeclaredConstructor()不是  getDeclaredConstructors() ，所以返回的是一个Class对象而不是一个Class数组。\n\n    获取无参构造方法直接不传参数，如下所示:\n\n   try {\n          constructors = c4.getDeclaredConstructor();\n          System.out.print(Modifier.toString(constructors.getModifiers()) + );\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n      }\n    这里要进行异常捕获，因为可能不存在对应的构造方法，打印结果如下：  \n\n    \n\n\n   如果我们想获取有两个参数分别为int和String类型的构造方法，代码如下：\n\n  Class[] p = {int.class,String.class};\n  try {\n       constructors = c4.getDeclaredConstructor(p);\n       System.out.print(Modifier.toString(constructors.getModifiers()) + \"参数:\");\n       Class[] parametertypes = constructors.getParameterTypes();\n       for (int j = 0; j < parametertypes.length; j++) {\n            System.out.print(parametertypes[j].getName() + \" \");\n          }\n       } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n     }\n  这里我们同样打印出构造方法的参数：\n\n\n  \n\n  调用构造方法\n\n   从这里开始慢慢到了关键的一步，得到类的实例，我们主要借助于newInstance方法，为了方便演示我们将测试类的两个构造方法打印出来. \n\n   public Test(int age, String name) {\n        this.age = age;\n        this.name = name;\n        System.out.println(\"hello\" + name + \"i am\" + age);\n    }\n \n \n    private Test(String name) {\n        this.name = name;\n        System.out.println(\"My Name is\" +\n                name);\n    }\n   我们先来调用public的方法，如下所示：\n\n Class[] p = {int.class,String.class};\n constructors = c4.getDeclaredConstructor(p);\n constructors.newInstance(24,\"HuangLinqing\");\n 运行打印结果如下：\n\n\n  \n\n 那么调用私有构造方法呢，和上面一样，只是我们要设置constructors.setAccessible(true);代码如下：\n\n  Class[] p = {String.class};\n  constructors = c4.getDeclaredConstructor(p);\n  constructors.setAccessible(true);\n  constructors.newInstance(\"HuangLinqing\");\n  打印结果如下：\n\n\n   \n\n调用类的私有方法\n\n  如何调用类中的私有方法呢，我们先在测试类中编写一个测试的私有方法 如下：\n\n  private void welcome(String tips){\n        System.out.println(tips);\n    }\n  我们知道如果我们要正常的调用类的方法都是通过类.方法调用，所以我们调用私有方法也需要得到类的实例，而我们上面newInstace已经得到了类的实例，这样就好办了。\n\n   Class[] p4 = {String.class};\n   Method method = c4.getDeclaredMethod(\"welcome\",p4);\n   method.setAccessible(true);\n   我们首先通过 getDeclaredMethod方法获取到这个私有方法，第一个参数是方法名，第二个参数是参数类型\n\n   然后通过invoke方法执行，invoke需要两个参数一个是类的实例，一个是方法参数。\n\n     Class[] p4 = {String.class};\n     Method method = c4.getDeclaredMethod(\"welcome\",p4);\n     method.setAccessible(true);\n     Object arg1s[] = {\"欢迎关注代码男人技术公众号\"};\n     method.invoke(test,arg1s);\n     test类的实例当不能new 获取的时候我们也可以通过反射获取，就是上面的newInstance方法。打印结果如下：\n\n\n    \n\n 获取类的私有字段并修改值\n\n  看到这里你可能会说，有了set方法，什么私有不私有，test.set不就可以了，但是这里要注意我们是没有办法得到这个类的实例的，要不然都可以得到实例就没有反射一说了。我们在通过反射得到类的实例之后先获取字段：\n\nField field = c4.getDeclaredField(\"name\");\nfield.setAccessible(true);\nfield.set(o,\"代码男人\");\n   o是我们上面通过反射构造方法获取的实例，  打印field.get(o).toString()的值如下：\n  \n\n   \n\n   不过要注意的是我们修改了name的值只对当前的实例对象有效。\n\n \n\n   Java的基本反射语法就是这样了，欢迎加入技术群一起探讨！\n\n  最后反射封装类如下：\n\npackage jnidemo.hlq.com.hookdemo;\n \nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n \n/**\n * @author Huanglinqing\n * @date 2019/4/28\n */\n \npublic class Reflex {\n \n    /**\n     * 获取无参构造函数\n     * @param className\n     * @return\n     */\n    public static Object createObject(String className) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 获取无参构造方法\n     * @param clazz\n     * @return\n     */\n    public static Object createObject(Class clazz) {\n        Class[] pareTyple = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return createObject(clazz, pareTyple, pareVaules);\n    }\n \n    /**\n     * 获取一个参数的构造函数  已知className\n     *\n     * @param className\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object createObject(String className, Class pareTyple, Object pareVaule) {\n \n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取单个参数的构造方法 已知类\n     *\n     * @param clazz\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object createObject(Class clazz, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return createObject(clazz, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取多个参数的构造方法 已知className\n     * @param className\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object createObject(String className, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取构造方法\n     *\n     * @param clazz\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object createObject(Class clazz, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Constructor ctor = clazz.getDeclaredConstructor(pareTyples);\n            ctor.setAccessible(true);\n            return ctor.newInstance(pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取多个参数的方法\n     * @param obj\n     * @param methodName\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName, Class[] pareTyples, Object[] pareVaules) {\n        if (obj == null) {\n            return null;\n        }\n \n        try {\n            //调用一个private方法 //在指定类中获取指定的方法\n            Method method = obj.getClass().getDeclaredMethod(methodName, pareTyples);\n            method.setAccessible(true);\n            return method.invoke(obj, pareVaules);\n \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 获取一个参数的方法\n     * @param obj\n     * @param methodName\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = {pareTyple};\n        Object[] pareVaules = {pareVaule};\n \n        return invokeInstanceMethod(obj, methodName, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取无参方法\n     * @param obj\n     * @param methodName\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeInstanceMethod(obj, methodName, pareTyples, pareVaules);\n    }\n \n \n    /**\n     * 无参静态方法\n     * @param className\n     * @param method_name\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeStaticMethod(className, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取一个参数的静态方法\n     * @param className\n     * @param method_name\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return invokeStaticMethod(className, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取多个参数的静态方法\n     * @param className\n     * @param method_name\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Class obj_class = Class.forName(className);\n            return invokeStaticMethod(obj_class, method_name, pareTyples, pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 无参静态方法\n     * @param method_name\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeStaticMethod(clazz, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 一个参数静态方法\n     * @param clazz\n     * @param method_name\n     * @param classType\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name, Class classType, Object pareVaule) {\n        Class[] classTypes = new Class[]{classType};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return invokeStaticMethod(clazz, method_name, classTypes, pareVaules);\n    }\n \n    /**\n     * 多个参数的静态方法\n     * @param clazz\n     * @param method_name\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Method method = clazz.getDeclaredMethod(method_name, pareTyples);\n            method.setAccessible(true);\n            return method.invoke(null, pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    public static Object getFieldObject(String className, Object obj, String filedName) {\n        try {\n            Class obj_class = Class.forName(className);\n            return getFieldObject(obj_class, obj, filedName);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n \n    public static Object getFieldObject(Class clazz, Object obj, String filedName) {\n        try {\n            Field field = clazz.getDeclaredField(filedName);\n            field.setAccessible(true);\n            return field.get(obj);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    public static void setFieldObject(Class clazz, Object obj, String filedName, Object filedVaule) {\n        try {\n            Field field = clazz.getDeclaredField(filedName);\n            field.setAccessible(true);\n            field.set(obj, filedVaule);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n \n    public static void setFieldObject(String className, Object obj, String filedName, Object filedVaule) {\n        try {\n            Class obj_class = Class.forName(className);\n            setFieldObject(obj_class, obj, filedName, filedVaule);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n \n \n    public static Object getStaticFieldObject(String className, String filedName) {\n        return getFieldObject(className, null, filedName);\n    }\n \n    public static Object getStaticFieldObject(Class clazz, String filedName) {\n        return getFieldObject(clazz, null, filedName);\n    }\n \n    public static void setStaticFieldObject(String classname, String filedName, Object filedVaule) {\n        setFieldObject(classname, null, filedName, filedVaule);\n    }\n \n    public static void setStaticFieldObject(Class clazz, String filedName, Object filedVaule) {\n        setFieldObject(clazz, null, filedName, filedVaule);\n    }\n\n————————————————\n版权声明：本文为CSDN博主「黄林晴」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/huangliniqng/article/details/88554510相信很多人都知道反射可以说是Java中最强大的技术了，它可以做的事情太多太多，很多优秀的开源框架都是通过反射完成的，比如最初的很多注解框架，后来因为java反射影响性能，所以被运行时注解APT替代了，java反射有个开源框架jOOR相信很多人都用过，不过我们还是要学习反射的基础语法，这样才能自己写出优秀的框架，当然这里所讲的反射技术，是学习Android插件化技术、Hook技术等必不可少的！\n\n一、基本反射技术\n\n      1.1 根据一个字符串得到一个类\n\n        getClass方法\n\n String name = \"Huanglinqing\";\n Class c1 = name.getClass();\n System.out.println(c1.getName());\n     打印结果如下：\n\n    \n\n    Class.forName\n\n    比如我们获取java.lang.String的类名 \n\n   String name = \"java.lang.String\";\n   Class c1 = null;\n   try {\n          c1 = Class.forName(name);\n          System.out.println(c1.getName());\n      } catch (ClassNotFoundException e) {\n  }\n    这里也通过捕获异常，因为我们传的这个字符串可能不合法，字符串合法命名是类的命名空间和类的名称组成\n\n    打印结果如下：\n\n    \n   我们还可以通过c1.getSuperclass()获取到他的父类\n\n   Type属性\n\n    基本类型都有type属性，可以得到这个基本类型的类型，比如：\n\nClass c1 = Boolean.TYPE;\nClass c2 = Byte.TYPE;\nClass c3 = Float.TYPE;\nClass c4 = Double.TYPE;\n 停停停！这些东西有啥子用，如此鸡肋！ 别急，一切都是为后续做准备。\n二、获取类的成员\n\n         当类中方法定义为私有的时候我们能调用？不能！当变量是私有的时候我们能获取吗？不能！但是反射可以，比如源码中有你需要用到的方法，但是那个方法是私有的，这个时候你就可以通过反射去执行这个私有方法，并且获取私有变量。\n\n       获取类的构造函数\n\n       为了便于测试，我们定义一个Test类，Test类如下：（省略get和set方法）\n\n       Test类中我们定义是三个私有变量，生成两个公有的含参构造方法和一个私有的含参构造方法以及一个公有的无参构造方法。\n\npublic class Test {\n \n    private int age;\n    private String name;\n    private int testint;\n \n    public Test(int age) {\n        this.age = age;\n    }\n \n    public Test(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n \n    private Test(String name) {\n        this.name = name;\n    }\n \n    public Test() {\n    }\n      下面我们通过反射获取这些构造方法\n\n       获取类的所有构造方法\n\n Test test = new Test();\n Class c4 = test.getClass();\n Constructor[] constructors ;\n constructors = c4.getDeclaredConstructors();\n      通过getDeclaredConstructors可以返回类的所有构造方法，返回的是一个数组因为构造方法可能不止一个，通过getModifiers可以得到构造方法的类型，getParameterTypes可以得到构造方法的所有参数，返回的是一个Class数组，所以我们如果想获取所有构造方法以及每个构造方法的参数类型，可以有如下代码：\n\n  for (int i = 0; i < constructors.length; i++) {\n        System.out.print(Modifier.toString(constructors[i].getModifiers()) + \"参数：\");\n        Class[] parametertypes = constructors[i].getParameterTypes();\n        for (int j = 0; j < parametertypes.length; j++) {\n             System.out.print(parametertypes[j].getName() + \" \");\n       }\n      System.out.println(\"\");\n  }\n    运行结果如下所示：\n\n    \n\n    这样我们就得到了类中所有构造方法和构造方法中的参数，那么我们如何获取特定的构造方法呢？\n\n    获取类中特定的构造方法\n\n    我们可以通过getConstructors方法获取类中 所有的public类型的构造方法，代码和上面一样就不演示了。\n\n    我们可以通过getDeclaredConstructor()方法传参获取特定参数类型的构造方法，这里注意是getDeclaredConstructor()不是  getDeclaredConstructors() ，所以返回的是一个Class对象而不是一个Class数组。\n\n    获取无参构造方法直接不传参数，如下所示:\n\n   try {\n          constructors = c4.getDeclaredConstructor();\n          System.out.print(Modifier.toString(constructors.getModifiers()) + );\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n      }\n    这里要进行异常捕获，因为可能不存在对应的构造方法，打印结果如下：  \n\n    \n\n\n   如果我们想获取有两个参数分别为int和String类型的构造方法，代码如下：\n\n  Class[] p = {int.class,String.class};\n  try {\n       constructors = c4.getDeclaredConstructor(p);\n       System.out.print(Modifier.toString(constructors.getModifiers()) + \"参数:\");\n       Class[] parametertypes = constructors.getParameterTypes();\n       for (int j = 0; j < parametertypes.length; j++) {\n            System.out.print(parametertypes[j].getName() + \" \");\n          }\n       } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n     }\n  这里我们同样打印出构造方法的参数：\n\n\n  \n\n  调用构造方法\n\n   从这里开始慢慢到了关键的一步，得到类的实例，我们主要借助于newInstance方法，为了方便演示我们将测试类的两个构造方法打印出来. \n\n   public Test(int age, String name) {\n        this.age = age;\n        this.name = name;\n        System.out.println(\"hello\" + name + \"i am\" + age);\n    }\n \n \n    private Test(String name) {\n        this.name = name;\n        System.out.println(\"My Name is\" +\n                name);\n    }\n   我们先来调用public的方法，如下所示：\n\n Class[] p = {int.class,String.class};\n constructors = c4.getDeclaredConstructor(p);\n constructors.newInstance(24,\"HuangLinqing\");\n 运行打印结果如下：\n\n\n  \n\n 那么调用私有构造方法呢，和上面一样，只是我们要设置constructors.setAccessible(true);代码如下：\n\n  Class[] p = {String.class};\n  constructors = c4.getDeclaredConstructor(p);\n  constructors.setAccessible(true);\n  constructors.newInstance(\"HuangLinqing\");\n  打印结果如下：\n\n\n   \n\n调用类的私有方法\n\n  如何调用类中的私有方法呢，我们先在测试类中编写一个测试的私有方法 如下：\n\n  private void welcome(String tips){\n        System.out.println(tips);\n    }\n  我们知道如果我们要正常的调用类的方法都是通过类.方法调用，所以我们调用私有方法也需要得到类的实例，而我们上面newInstace已经得到了类的实例，这样就好办了。\n\n   Class[] p4 = {String.class};\n   Method method = c4.getDeclaredMethod(\"welcome\",p4);\n   method.setAccessible(true);\n   我们首先通过 getDeclaredMethod方法获取到这个私有方法，第一个参数是方法名，第二个参数是参数类型\n\n   然后通过invoke方法执行，invoke需要两个参数一个是类的实例，一个是方法参数。\n\n     Class[] p4 = {String.class};\n     Method method = c4.getDeclaredMethod(\"welcome\",p4);\n     method.setAccessible(true);\n     Object arg1s[] = {\"欢迎关注代码男人技术公众号\"};\n     method.invoke(test,arg1s);\n     test类的实例当不能new 获取的时候我们也可以通过反射获取，就是上面的newInstance方法。打印结果如下：\n\n\n    \n\n 获取类的私有字段并修改值\n\n  看到这里你可能会说，有了set方法，什么私有不私有，test.set不就可以了，但是这里要注意我们是没有办法得到这个类的实例的，要不然都可以得到实例就没有反射一说了。我们在通过反射得到类的实例之后先获取字段：\n\nField field = c4.getDeclaredField(\"name\");\nfield.setAccessible(true);\nfield.set(o,\"代码男人\");\n   o是我们上面通过反射构造方法获取的实例，  打印field.get(o).toString()的值如下：\n  \n\n   \n\n   不过要注意的是我们修改了name的值只对当前的实例对象有效。\n\n \n\n   Java的基本反射语法就是这样了，欢迎加入技术群一起探讨！\n\n  最后反射封装类如下：\n\npackage jnidemo.hlq.com.hookdemo;\n \nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n \n/**\n * @author Huanglinqing\n * @date 2019/4/28\n */\n \npublic class Reflex {\n \n    /**\n     * 获取无参构造函数\n     * @param className\n     * @return\n     */\n    public static Object createObject(String className) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 获取无参构造方法\n     * @param clazz\n     * @return\n     */\n    public static Object createObject(Class clazz) {\n        Class[] pareTyple = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return createObject(clazz, pareTyple, pareVaules);\n    }\n \n    /**\n     * 获取一个参数的构造函数  已知className\n     *\n     * @param className\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object createObject(String className, Class pareTyple, Object pareVaule) {\n \n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取单个参数的构造方法 已知类\n     *\n     * @param clazz\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object createObject(Class clazz, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return createObject(clazz, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取多个参数的构造方法 已知className\n     * @param className\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object createObject(String className, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Class r = Class.forName(className);\n            return createObject(r, pareTyples, pareVaules);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取构造方法\n     *\n     * @param clazz\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object createObject(Class clazz, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Constructor ctor = clazz.getDeclaredConstructor(pareTyples);\n            ctor.setAccessible(true);\n            return ctor.newInstance(pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    /**\n     * 获取多个参数的方法\n     * @param obj\n     * @param methodName\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName, Class[] pareTyples, Object[] pareVaules) {\n        if (obj == null) {\n            return null;\n        }\n \n        try {\n            //调用一个private方法 //在指定类中获取指定的方法\n            Method method = obj.getClass().getDeclaredMethod(methodName, pareTyples);\n            method.setAccessible(true);\n            return method.invoke(obj, pareVaules);\n \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 获取一个参数的方法\n     * @param obj\n     * @param methodName\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = {pareTyple};\n        Object[] pareVaules = {pareVaule};\n \n        return invokeInstanceMethod(obj, methodName, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取无参方法\n     * @param obj\n     * @param methodName\n     * @return\n     */\n    public static Object invokeInstanceMethod(Object obj, String methodName) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeInstanceMethod(obj, methodName, pareTyples, pareVaules);\n    }\n \n \n    /**\n     * 无参静态方法\n     * @param className\n     * @param method_name\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeStaticMethod(className, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取一个参数的静态方法\n     * @param className\n     * @param method_name\n     * @param pareTyple\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name, Class pareTyple, Object pareVaule) {\n        Class[] pareTyples = new Class[]{pareTyple};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return invokeStaticMethod(className, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 获取多个参数的静态方法\n     * @param className\n     * @param method_name\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeStaticMethod(String className, String method_name, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Class obj_class = Class.forName(className);\n            return invokeStaticMethod(obj_class, method_name, pareTyples, pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n    /**\n     * 无参静态方法\n     * @param method_name\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name) {\n        Class[] pareTyples = new Class[]{};\n        Object[] pareVaules = new Object[]{};\n \n        return invokeStaticMethod(clazz, method_name, pareTyples, pareVaules);\n    }\n \n    /**\n     * 一个参数静态方法\n     * @param clazz\n     * @param method_name\n     * @param classType\n     * @param pareVaule\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name, Class classType, Object pareVaule) {\n        Class[] classTypes = new Class[]{classType};\n        Object[] pareVaules = new Object[]{pareVaule};\n \n        return invokeStaticMethod(clazz, method_name, classTypes, pareVaules);\n    }\n \n    /**\n     * 多个参数的静态方法\n     * @param clazz\n     * @param method_name\n     * @param pareTyples\n     * @param pareVaules\n     * @return\n     */\n    public static Object invokeStaticMethod(Class clazz, String method_name, Class[] pareTyples, Object[] pareVaules) {\n        try {\n            Method method = clazz.getDeclaredMethod(method_name, pareTyples);\n            method.setAccessible(true);\n            return method.invoke(null, pareVaules);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    public static Object getFieldObject(String className, Object obj, String filedName) {\n        try {\n            Class obj_class = Class.forName(className);\n            return getFieldObject(obj_class, obj, filedName);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n \n    public static Object getFieldObject(Class clazz, Object obj, String filedName) {\n        try {\n            Field field = clazz.getDeclaredField(filedName);\n            field.setAccessible(true);\n            return field.get(obj);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n \n        return null;\n    }\n \n \n    public static void setFieldObject(Class clazz, Object obj, String filedName, Object filedVaule) {\n        try {\n            Field field = clazz.getDeclaredField(filedName);\n            field.setAccessible(true);\n            field.set(obj, filedVaule);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n \n    public static void setFieldObject(String className, Object obj, String filedName, Object filedVaule) {\n        try {\n            Class obj_class = Class.forName(className);\n            setFieldObject(obj_class, obj, filedName, filedVaule);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n \n \n    public static Object getStaticFieldObject(String className, String filedName) {\n        return getFieldObject(className, null, filedName);\n    }\n \n    public static Object getStaticFieldObject(Class clazz, String filedName) {\n        return getFieldObject(clazz, null, filedName);\n    }\n \n    public static void setStaticFieldObject(String classname, String filedName, Object filedVaule) {\n        setFieldObject(classname, null, filedName, filedVaule);\n    }\n \n    public static void setStaticFieldObject(Class clazz, String filedName, Object filedVaule) {\n        setFieldObject(clazz, null, filedName, filedVaule);\n    }\n\n————————————————\n版权声明：本文为CSDN博主「黄林晴」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：<a src=\"https://blog.csdn.net/huangliniqng/article/details/88554510\">原文</a>\n\nCaption\n\n',8,'2021-04-10 14:00:27','图片','测试',0,3,0),(142,'看看图片','        \n\nCaption\n\n',8,'2021-04-10 14:09:06','图片','图片测试',0,1,0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_comment`
--

DROP TABLE IF EXISTS `article_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `article_comment` (
                                   `article_id` int(11) DEFAULT NULL,
                                   `user_id` int(11) NOT NULL,
                                   `comment_id` int(11) NOT NULL AUTO_INCREMENT,
                                   `comment_content` text NOT NULL,
                                   `comment_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                   `username` varchar(99) NOT NULL,
                                   PRIMARY KEY (`comment_id`),
                                   KEY `article_comment_user_id_fk` (`user_id`),
                                   CONSTRAINT `article_comment_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_comment`
--

LOCK TABLES `article_comment` WRITE;
/*!40000 ALTER TABLE `article_comment` DISABLE KEYS */;
INSERT INTO `article_comment` VALUES (130,10,82,'题主在这里问这些问题还不如直接去百度呢~都是一群脑瘫','2021-04-01 16:07:54','一个接近神的人'),(130,10,83,'@一个接近神的人 说谁是脑瘫呢?你全家都是脑瘫','2021-04-01 16:15:20','一个接近神的人'),(130,10,84,'你自己想吧,这点问题都搞不明白!','2021-04-01 16:40:40','一个接近神的人'),(130,10,85,'诶,评论素质堪忧','2021-04-01 16:41:05','一个接近神的人'),(130,10,86,'你','2021-04-01 16:42:21','一个接近神的人'),(130,10,87,'你好','2021-04-02 02:02:55','一个接近神的人'),(130,10,88,'@一个接近神的人   你真厉害','2021-04-03 16:53:12','一个接近神的人'),(128,7,90,'@testuser','2021-04-03 19:52:44','testuser'),(128,10,91,'@testuser','2021-04-03 19:53:24','一个接近神的人'),(128,10,93,'你','2021-04-03 19:58:15','一个接近神的人'),(128,10,94,'@testuser','2021-04-03 20:17:51','一个接近神的人'),(130,10,96,'nnnnnnnn','2021-04-05 01:36:59','一个接近神的人'),(130,10,97,'ni','2021-04-05 01:39:18','一个接近神的人'),(130,10,98,'ssss','2021-04-05 01:39:44','一个接近神的人'),(130,10,99,'nihau','2021-04-05 01:45:21','一个接近神的人'),(1,10,100,'你好啊','2021-04-05 01:45:56','一个接近神的人'),(130,10,101,'lo','2021-04-05 01:47:22','一个接近神的人'),(130,10,102,'aa','2021-04-05 01:47:43','一个接近神的人'),(130,10,103,'aa','2021-04-05 01:47:49','一个接近神的人'),(130,10,104,'你好','2021-04-05 01:49:57','一个接近神的人'),(130,10,105,'你好','2021-04-05 01:50:11','一个接近神的人'),(130,10,106,'是你','2021-04-05 01:53:33','一个接近神的人'),(130,10,107,'鞍山市','2021-04-05 01:54:33','一个接近神的人'),(130,10,108,'你奶奶','2021-04-05 01:55:11','一个接近神的人'),(130,10,109,'ni','2021-04-05 01:56:16','一个接近神的人'),(130,10,110,'aaa','2021-04-05 01:56:55','一个接近神的人'),(130,11,111,'@一个接近神的人','2021-04-05 16:56:26','wei'),(131,11,112,'看得见看得见❤️','2021-04-06 23:59:53','wei'),(130,11,113,'》〉》','2021-04-07 00:05:44','wei'),(131,11,114,'你','2021-04-07 00:46:52','wei'),(131,8,115,'@wei   zaikai','2021-04-07 09:00:00','testuser01'),(1,10,116,'，，，','2021-04-09 00:24:09','一个接近神的人'),(133,10,117,'看得见吗qwq','2021-04-12 01:45:32','一个接近神的人');
/*!40000 ALTER TABLE `article_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `file`
--

DROP TABLE IF EXISTS `file`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `file` (
                        `file_id` int(11) NOT NULL AUTO_INCREMENT,
                        `file_name` varchar(90) NOT NULL DEFAULT 'unknown',
                        `user_id` int(11) DEFAULT NULL,
                        `tag1` varchar(30) DEFAULT NULL,
                        `tag2` varchar(30) DEFAULT NULL,
                        `file_size` int(11) NOT NULL DEFAULT '0',
                        `download_number` int(11) NOT NULL DEFAULT '0',
                        `file_md5` varchar(35) NOT NULL,
                        PRIMARY KEY (`file_id`),
                        KEY `file_user_id_fk` (`user_id`),
                        CONSTRAINT `file_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=107 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `file`
--

LOCK TABLES `file` WRITE;
/*!40000 ALTER TABLE `file` DISABLE KEYS */;
INSERT INTO `file` VALUES (95,'开题报告 孙豪 2017050077.docx',11,'','',18,0,''),(96,'欢迎界面.html',11,'Java','',0,0,''),(97,'网页布局.html',11,'','',8,0,''),(98,'前端单词.xls',11,'','',67,0,''),(99,'前端单词.xls',11,'','',67,0,''),(100,'前端单词-4.xls',11,'','',67,0,''),(101,'',11,'','',0,0,''),(102,'前端单词-3.xls',11,'','',67,0,''),(103,'（内招生、港澳台侨生）学生医保广州就医、报销流程.pdf',11,'','',1444,0,'e35c5cd5d5563ae4b20a4da5b6c44487'),(104,'353CAED4B3D8C9E7631490F5F6965BF8.png',11,'','',108,0,'353caed4b3d8c9e7631490f5f6965bf8');
/*!40000 ALTER TABLE `file` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `like_record`
--

DROP TABLE IF EXISTS `like_record`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `like_record` (
                               `record_id` int(11) NOT NULL AUTO_INCREMENT,
                               `user_id` int(11) NOT NULL,
                               `article_id` int(11) NOT NULL,
                               PRIMARY KEY (`record_id`),
                               KEY `like_record_article_article_id_fk` (`article_id`),
                               KEY `like_record_user_id_fk` (`user_id`),
                               CONSTRAINT `like_record_article_article_id_fk` FOREIGN KEY (`article_id`) REFERENCES `article` (`article_id`),
                               CONSTRAINT `like_record_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=136 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='文章赞记录表,有记录表示喜欢';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `like_record`
--

LOCK TABLES `like_record` WRITE;
/*!40000 ALTER TABLE `like_record` DISABLE KEYS */;
INSERT INTO `like_record` VALUES (127,7,128),(128,7,127),(129,7,126),(130,10,130),(131,10,130),(132,10,130);
/*!40000 ALTER TABLE `like_record` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mention_user`
--

DROP TABLE IF EXISTS `mention_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `mention_user` (
                                `article_id` int(11) NOT NULL,
                                `user_id` int(11) NOT NULL,
                                `mention_id` int(11) NOT NULL AUTO_INCREMENT,
                                PRIMARY KEY (`mention_id`),
                                KEY `mention_user_user_id_fk` (`user_id`),
                                CONSTRAINT `mention_user_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='提到了某个用户';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mention_user`
--

LOCK TABLES `mention_user` WRITE;
/*!40000 ALTER TABLE `mention_user` DISABLE KEYS */;
INSERT INTO `mention_user` VALUES (130,10,1),(130,10,2),(130,10,3),(130,10,4),(128,7,5),(128,7,6),(128,7,7),(130,10,8),(130,10,9),(131,11,10),(131,11,11),(130,10,12),(131,11,13);
/*!40000 ALTER TABLE `mention_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `opt_record`
--

DROP TABLE IF EXISTS `opt_record`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `opt_record` (
                              `opt_id` int(11) NOT NULL AUTO_INCREMENT,
                              `admin_id` int(11) DEFAULT NULL,
                              `opt_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
                              `opt_translation` varchar(60) NOT NULL,
                              PRIMARY KEY (`opt_id`),
                              KEY `opt_record_admin_admin_id_fk` (`admin_id`),
                              CONSTRAINT `opt_record_admin_admin_id_fk` FOREIGN KEY (`admin_id`) REFERENCES `admin` (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='操作记录';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `opt_record`
--

LOCK TABLES `opt_record` WRITE;
/*!40000 ALTER TABLE `opt_record` DISABLE KEYS */;
INSERT INTO `opt_record` VALUES (1,1,'2021-04-04 14:08:41',''),(2,1,'2021-04-05 06:49:47','管理员孙豪禁用了用户123'),(3,1,'2021-04-05 06:49:49','管理员孙豪解禁了用户123'),(4,1,'2021-04-05 07:08:27','管理员孙豪禁用了用户testuser'),(5,1,'2021-04-05 07:08:28','管理员孙豪解禁了用户testuser'),(6,1,'2021-04-05 07:09:16','管理员孙豪禁用了用户123'),(7,1,'2021-04-05 07:09:17','管理员孙豪禁用了用户123'),(8,1,'2021-04-05 07:09:58','管理员孙豪禁用了用户123'),(9,1,'2021-04-05 07:10:39','管理员孙豪禁用了用户一个接近神的人'),(10,1,'2021-04-05 15:07:45','管理员孙豪禁用了用户一个接近神的人'),(11,1,'2021-04-05 15:07:47','管理员孙豪解禁了用户一个接近神的人'),(12,1,'2021-04-05 15:07:55','管理员孙豪解禁了用户testuser'),(13,1,'2021-04-05 15:20:37','管理员孙豪禁用了用户一个接近神的人'),(14,1,'2021-04-05 15:22:48','管理员孙豪禁用了用户一个接近神的人'),(15,1,'2021-04-06 17:21:26','管理员孙豪禁用了用户testuser01'),(16,1,'2021-04-06 17:23:26','管理员孙豪解禁了用户一个接近神的人'),(17,1,'2021-04-06 17:23:31','管理员孙豪解禁了用户一个接近神的人'),(18,1,'2021-04-06 17:23:32','管理员孙豪解禁了用户一个接近神的人'),(19,1,'2021-04-06 17:24:19','管理员孙豪解禁了用户一个接近神的人'),(20,1,'2021-04-06 17:24:24','管理员孙豪解禁了用户一个接近神的人'),(21,1,'2021-04-06 17:24:25','管理员孙豪解禁了用户一个接近神的人'),(22,1,'2021-04-06 17:24:26','管理员孙豪解禁了用户一个接近神的人'),(23,1,'2021-04-06 17:24:26','管理员孙豪解禁了用户一个接近神的人'),(24,1,'2021-04-06 17:24:51','管理员孙豪解禁了用户一个接近神的人'),(25,1,'2021-04-06 17:27:17','管理员孙豪解禁了用户123'),(26,1,'2021-04-06 17:27:35','管理员孙豪解禁了用户123'),(27,1,'2021-04-06 17:27:44','管理员孙豪禁用了用户wei'),(28,1,'2021-04-06 17:30:41','管理员孙豪解禁了用户testuser'),(29,1,'2021-04-06 17:31:34','管理员孙豪禁用了用户testuser'),(30,1,'2021-04-06 17:31:48','管理员孙豪解禁了用户testuser'),(31,1,'2021-04-06 17:31:50','管理员孙豪解禁了用户testuser01'),(32,1,'2021-04-06 17:31:53','管理员孙豪解禁了用户123'),(33,1,'2021-04-06 17:31:56','管理员孙豪解禁了用户一个接近神的人'),(34,1,'2021-04-06 17:31:59','管理员孙豪解禁了用户wei'),(35,1,'2021-04-07 09:18:36','管理员孙豪禁用了用户testuser'),(36,1,'2021-04-07 09:18:41','管理员孙豪解禁了用户testuser'),(37,1,'2021-04-07 21:23:18','管理员孙豪审查用户testuser01的信息通过，并同意了该用户的宣传活动请求'),(38,1,'2021-04-07 21:41:36','管理员孙豪审查用户一个接近神的人的信息通过，并同意了该用户的宣传活动请求'),(39,1,'2021-04-08 02:30:51','管理员孙豪删除了代号为93的文件！'),(40,1,'2021-04-08 02:32:48','管理员孙豪删除了代号为94的文件！'),(41,1,'2021-04-08 02:33:08','管理员孙豪删除了代号为105的文件！'),(42,1,'2021-04-08 20:18:56','管理员孙豪删除了代号为2的长文/提问！'),(43,1,'2021-04-08 20:19:00','管理员孙豪删除了代号为3的长文/提问！'),(44,1,'2021-04-08 20:20:45','管理员孙豪将用户testuser限制使用，该用户只能查看无法发言'),(45,1,'2021-04-09 23:42:35','管理员孙豪禁用了用户testuser'),(46,1,'2021-04-12 18:35:26','管理员孙豪删除了代号为106的文件！'),(47,1,'2021-04-12 22:29:50','管理员孙豪审查用户testuser信息后，拒绝了该用户的注销请求，');
/*!40000 ALTER TABLE `opt_record` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plan`
--

DROP TABLE IF EXISTS `plan`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `plan` (
                        `plan_id` int(11) NOT NULL AUTO_INCREMENT,
                        `plan` varchar(99) NOT NULL,
                        `start_time` datetime NOT NULL,
                        `user_id` int(11) NOT NULL,
                        `completed` varchar(3) NOT NULL DEFAULT 'no',
                        PRIMARY KEY (`plan_id`),
                        KEY `todo_list_user_id_fk` (`user_id`),
                        CONSTRAINT `todo_list_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='计划列表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plan`
--

LOCK TABLES `plan` WRITE;
/*!40000 ALTER TABLE `plan` DISABLE KEYS */;
INSERT INTO `plan` VALUES (6,'解决活动功能(睡醒后再做)','2021-03-31 15:30:00',7,'yes'),(7,'解决下载功能','2021-03-31 17:30:00',7,'yes'),(8,'完善计划页面','2021-03-31 21:30:00',7,'yes'),(9,'在干嘛','2024-02-02 03:03:00',10,'yes'),(11,'你','2024-01-02 00:00:00',10,'yes'),(21,'吃饭','2022-05-04 04:06:00',8,'yes'),(27,'2020','2021-03-02 00:00:00',10,'no'),(28,'计划月薪3000000','2022-02-03 03:00:00',10,'no'),(29,'ni','2021-05-02 00:00:00',7,'no');
/*!40000 ALTER TABLE `plan` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
SET character_set_client = utf8mb4 ;
CREATE TABLE `user` (
                        `id` int(11) NOT NULL AUTO_INCREMENT,
                        `username` varchar(90) NOT NULL,
                        `password` varchar(20) NOT NULL,
                        `school` varchar(40) NOT NULL DEFAULT 'unknown',
                        `sex` varchar(30) NOT NULL DEFAULT 'male',
                        `major` varchar(12) DEFAULT NULL COMMENT '专业',
                        `self_description` varchar(255) DEFAULT NULL,
                        `birthday` date DEFAULT NULL,
                        `is_available` smallint(6) NOT NULL DEFAULT '1',
                        `phone_number` varchar(11) NOT NULL,
                        `real_name` varchar(10) DEFAULT NULL,
                        `user_location` varchar(45) NOT NULL,
                        `profile_picture` varchar(100) NOT NULL DEFAULT '/img/bg2.jpg',
                        `hobby` varchar(30) DEFAULT NULL,
                        PRIMARY KEY (`id`),
                        UNIQUE KEY `user_username_uindex` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (7,'testuser','111','','male','CS','我被禁言','1999-10-08',1,'18325336908','sunha','','','JavaEE'),(8,'testuser01','111','北京大学','male','nnnnn','nnnnn','1999-10-08',1,'18325336903','sunhao','北京市','/img/8.jpg','写作'),(9,'123','123456SW','JNU','male','CS',NULL,'1999-10-08',1,'18325336907','ss','精确到城市','','小说'),(10,'一个接近神的人','991008sunhao','','male','软件工程3','软件工程','1999-10-08',1,'18325336901','孙豪','广东省广州市','/img/10.jpg','springboot'),(11,'wei','123456sunhao','','female','你好','你好','1999-10-08',1,'18234563421','sung','','/img/wei.jpg','物理');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-04-14  0:47:51

